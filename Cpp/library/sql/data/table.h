// generated by ./ddl2cpp DDL-MySQL.sql table table
#ifndef TABLE_TABLE_H
#define TABLE_TABLE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace table
{
  namespace Classroom_
  {
    struct Building
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "building";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T building;
            T& operator()() { return building; }
            const T& operator()() const { return building; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct RoomNumber
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "room_number";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T roomNumber;
            T& operator()() { return roomNumber; }
            const T& operator()() const { return roomNumber; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Capacity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "capacity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T capacity;
            T& operator()() { return capacity; }
            const T& operator()() const { return capacity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Classroom_

  struct Classroom: sqlpp::table_t<Classroom,
               Classroom_::Building,
               Classroom_::RoomNumber,
               Classroom_::Capacity>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "classroom";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T classroom;
        T& operator()() { return classroom; }
        const T& operator()() const { return classroom; }
      };
    };
  };
  namespace Department_
  {
    struct DeptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dept_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deptName;
            T& operator()() { return deptName; }
            const T& operator()() const { return deptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Building
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "building";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T building;
            T& operator()() { return building; }
            const T& operator()() const { return building; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Budget
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "budget";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T budget;
            T& operator()() { return budget; }
            const T& operator()() const { return budget; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Department_

  struct Department: sqlpp::table_t<Department,
               Department_::DeptName,
               Department_::Building,
               Department_::Budget>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "department";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T department;
        T& operator()() { return department; }
        const T& operator()() const { return department; }
      };
    };
  };
  namespace Course_
  {
    struct CourseId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "course_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T courseId;
            T& operator()() { return courseId; }
            const T& operator()() const { return courseId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Title
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "title";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T title;
            T& operator()() { return title; }
            const T& operator()() const { return title; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct DeptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dept_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deptName;
            T& operator()() { return deptName; }
            const T& operator()() const { return deptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Credits
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "credits";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T credits;
            T& operator()() { return credits; }
            const T& operator()() const { return credits; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Course_

  struct Course: sqlpp::table_t<Course,
               Course_::CourseId,
               Course_::Title,
               Course_::DeptName,
               Course_::Credits>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "course";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T course;
        T& operator()() { return course; }
        const T& operator()() const { return course; }
      };
    };
  };
  namespace Instructor_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct DeptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dept_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deptName;
            T& operator()() { return deptName; }
            const T& operator()() const { return deptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Salary
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "salary";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T salary;
            T& operator()() { return salary; }
            const T& operator()() const { return salary; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Instructor_

  struct Instructor: sqlpp::table_t<Instructor,
               Instructor_::ID,
               Instructor_::Name,
               Instructor_::DeptName,
               Instructor_::Salary>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "instructor";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T instructor;
        T& operator()() { return instructor; }
        const T& operator()() const { return instructor; }
      };
    };
  };
  namespace Teaches_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct CourseId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "course_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T courseId;
            T& operator()() { return courseId; }
            const T& operator()() const { return courseId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct SecId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sec_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T secId;
            T& operator()() { return secId; }
            const T& operator()() const { return secId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Semester
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "semester";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T semester;
            T& operator()() { return semester; }
            const T& operator()() const { return semester; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Year
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "year";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T year;
            T& operator()() { return year; }
            const T& operator()() const { return year; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Teaches_

  struct Teaches: sqlpp::table_t<Teaches,
               Teaches_::ID,
               Teaches_::CourseId,
               Teaches_::SecId,
               Teaches_::Semester,
               Teaches_::Year>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "teaches";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T teaches;
        T& operator()() { return teaches; }
        const T& operator()() const { return teaches; }
      };
    };
  };
  namespace Student_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct DeptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dept_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deptName;
            T& operator()() { return deptName; }
            const T& operator()() const { return deptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct TotCred
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tot_cred";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T totCred;
            T& operator()() { return totCred; }
            const T& operator()() const { return totCred; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Student_

  struct Student: sqlpp::table_t<Student,
               Student_::ID,
               Student_::Name,
               Student_::DeptName,
               Student_::TotCred>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "student";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T student;
        T& operator()() { return student; }
        const T& operator()() const { return student; }
      };
    };
  };
  namespace Takes_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct CourseId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "course_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T courseId;
            T& operator()() { return courseId; }
            const T& operator()() const { return courseId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct SecId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sec_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T secId;
            T& operator()() { return secId; }
            const T& operator()() const { return secId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Semester
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "semester";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T semester;
            T& operator()() { return semester; }
            const T& operator()() const { return semester; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Year
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "year";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T year;
            T& operator()() { return year; }
            const T& operator()() const { return year; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
    struct Grade
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "grade";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T grade;
            T& operator()() { return grade; }
            const T& operator()() const { return grade; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Takes_

  struct Takes: sqlpp::table_t<Takes,
               Takes_::ID,
               Takes_::CourseId,
               Takes_::SecId,
               Takes_::Semester,
               Takes_::Year,
               Takes_::Grade>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "takes";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T takes;
        T& operator()() { return takes; }
        const T& operator()() const { return takes; }
      };
    };
  };
  namespace Advisor_
  {
    struct SID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "s_ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sID;
            T& operator()() { return sID; }
            const T& operator()() const { return sID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct IID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "i_ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T iID;
            T& operator()() { return iID; }
            const T& operator()() const { return iID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Advisor_

  struct Advisor: sqlpp::table_t<Advisor,
               Advisor_::SID,
               Advisor_::IID>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "advisor";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T advisor;
        T& operator()() { return advisor; }
        const T& operator()() const { return advisor; }
      };
    };
  };
  namespace TimeSlot_
  {
    struct TimeSlotId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_slot_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timeSlotId;
            T& operator()() { return timeSlotId; }
            const T& operator()() const { return timeSlotId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Day
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "day";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T day;
            T& operator()() { return day; }
            const T& operator()() const { return day; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct StartHr
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "start_hr";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T startHr;
            T& operator()() { return startHr; }
            const T& operator()() const { return startHr; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
    struct StartMin
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "start_min";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T startMin;
            T& operator()() { return startMin; }
            const T& operator()() const { return startMin; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
    struct EndHr
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "end_hr";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T endHr;
            T& operator()() { return endHr; }
            const T& operator()() const { return endHr; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
    struct EndMin
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "end_min";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T endMin;
            T& operator()() { return endMin; }
            const T& operator()() const { return endMin; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  } // namespace TimeSlot_

  struct TimeSlot: sqlpp::table_t<TimeSlot,
               TimeSlot_::TimeSlotId,
               TimeSlot_::Day,
               TimeSlot_::StartHr,
               TimeSlot_::StartMin,
               TimeSlot_::EndHr,
               TimeSlot_::EndMin>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "time_slot";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T timeSlot;
        T& operator()() { return timeSlot; }
        const T& operator()() const { return timeSlot; }
      };
    };
  };
  namespace Prereq_
  {
    struct CourseId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "course_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T courseId;
            T& operator()() { return courseId; }
            const T& operator()() const { return courseId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PrereqId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "prereq_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T prereqId;
            T& operator()() { return prereqId; }
            const T& operator()() const { return prereqId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Prereq_

  struct Prereq: sqlpp::table_t<Prereq,
               Prereq_::CourseId,
               Prereq_::PrereqId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "prereq";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T prereq;
        T& operator()() { return prereq; }
        const T& operator()() const { return prereq; }
      };
    };
  };
} // namespace table
#endif
