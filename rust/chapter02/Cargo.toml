# rustup docs 在浏览器中查看本地文档
# rustup docs --book 在浏览器中查看 The Rust Programming Language

# cargo new hello_world 创建 binary package
# cargo new --lib hello_world 创建 library package
# cargo build 构建项目
# cargo run 构建并运行
# cargo check 快速检查代码确保其可以编译, 但并不产生可执行文件
# cargo build --release 优化无调试信息
# cargo doc --open 命令构建所有本地依赖提供的文档, 并在浏览器中打开

# cargo test 生成的二进制文件的默认行为是并行的运行所有测试
# 并截获测试运行过程中产生的输出, 阻止他们被显示出来
# 可以将一部分命令行参数传递给 cargo test, 而将另外一部分传递给生成的测试二进制文件
# 为了分隔这两种参数, 需要先列出传递给 cargo test 的参数
# 接着是分隔符 --, 再之后是传递给测试二进制文件的参数
# 运行 cargo test --help 会提示 cargo test 的有关参数
# 运行 cargo test -- --help 可以提示在分隔符 -- 之后使用的有关参数
# 可以传递 --test-threads 参数和希望使用线程的数量给测试二进制文件, 例如:
# cargo test -- --test-threads=1
# 输出中不会出现测试通过时打印的内容
# 如果希望也能看到通过的测试中打印的值, 截获输出的行为可以通过 --nocapture 参数来禁用, 例如:
# cargo test -- --nocapture
# 可以向 cargo test 传递任意测试的名称(函数名)来只运行这个测试
# 也可以指定部分测试的名称, 也可以通过模块名来运行一个模块中的所有测试
# 只希望运行被忽略的测试, 可以使用:
# cargo test -- --ignored
# cargo test --test 文件名(无需扩展名) 运行某个特定集成测试文件中的所有测试

# Cargo.lock 文件记录项目依赖的实际版本

# [package], 是一个片段(section)标题, 表明下面的语句用来配置一个包
# 标题以及之后的内容属同一个片段, 直到遇到下一个标题才开始新的片段
[package]
authors = [ "kaiser <1244713586@qq.com>" ]
edition = "2018"
name    = "chapter02"
version = "0.1.0"

# 项目依赖的片段
# 在 Rust 中, 代码包被称为 crates
[dependencies]
# 语义化版本(Semantic Versioning), 是一种定义版本号的标准
# 0.7.3 事实上是 ^0.7.3 的简写, 它表示任何与 0.7.3 版本公有 API 相兼容的版本
# 如果 Cargo.lock 存在则使用其中指定的版本, 而不是再次计算所有的版本
# 使用 Cargo update 可以升级, 但是不会升级为 0.8.x 的版本, 除非修改 Cargo.toml
rand = "0.7.3"
